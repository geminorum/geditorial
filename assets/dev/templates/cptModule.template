<?php namespace <%= namespaceAuthor %>\<%= namespaceBase %>\Modules\<%= moduleCamelCase %>;

defined( 'ABSPATH' ) || die( header( 'HTTP/1.0 403 Forbidden' ) );

use <%= namespaceAuthor %>\<%= namespaceBase %>;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Core;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Internals;
use <%= namespaceAuthor %>\<%= namespaceBase %>\WordPress;

class <%= moduleCamelCase %> extends <%= namespaceBase %>\Module
{
	use Internals\TemplateTaxonomy;

	protected $disable_no_posttypes = TRUE;

	public static function module()
	{
		return [
			'name'     => '<%= moduleUnderline %>',
			'title'    => _x( '<%= moduleTitle %>', 'Modules: <%= moduleTitle %>', '<%= adminTexdomain %>' ),
			'desc'     => _x( '<%= moduleTagline %>', 'Modules: <%= moduleTitle %>', '<%= adminTexdomain %>' ),
			'icon'     => '<%= moduleDashicon %>',
			'access'   => 'planned',
			'keywords' => [
				'cptmodule',
			],
		];
	}

	protected function get_global_settings()
	{
		return [
			'_editpost' => [
				'metabox_advanced',
			],
			'_editlist' => [
				'show_in_quickedit',
			],
			'_frontend' => [
				'contents_viewable',
				'show_in_navmenus',
			],
		];
	}

	protected function get_global_constants()
	{
		return [
			'main_posttype'     => 'xxx',
			'category_taxonomy' => 'xxx_category',
		];
	}

	protected function get_module_icons()
	{
		return [
			'taxonomies' => [
				'category_taxonomy' => NULL,
			],
		];
	}

	protected function get_global_strings()
	{
		$strings = [
			'noops' => [
				'main_posttype'     => _n_noop( '', '', '<%= moduleTextdomain %>' ),
				'category_taxonomy' => _n_noop( '', '', '<%= moduleTextdomain %>' ),
			],
			'labels' => [
				'category_taxonomy' => [
					'show_option_all'      => _x( 'Definitions', 'Label: Show Option All', '<%= moduleTextdomain %>' ),
					'show_option_no_items' => _x( '(Undefined)', 'Label: Show Option No Terms', '<%= moduleTextdomain %>' ),
				],
			],
		];

		if ( ! is_admin() )
			return $strings;

		$strings['dashboard'] = [
			'current' => [ 'widget_title' => _x( 'Your Team Definition Summary', 'Dashboard Widget Title', '<%= moduleTextdomain %>' ), ],
			'all'     => [ 'widget_title' => _x( 'Editorial Definition Summary', 'Dashboard Widget Title', '<%= moduleTextdomain %>' ), ],
		];

		return $strings;
	}

	protected function define_default_terms()
	{
		return [
			'category_taxonomy' => [
				'' => _x( '', 'Main Taxonomy: Default Term', '<%= moduleTextdomain %>' ),
			],
		];
	}

	public function init()
	{
		parent::init();

		$this->register_taxonomy( 'category_taxonomy', [
			'hierarchical'       => TRUE,
			'meta_box_cb'        => $this->get_setting( 'metabox_advanced' ) ? NULL : FALSE,
			'show_in_quick_edit' => (bool) $this->get_setting( 'show_in_quickedit' ),
			'show_in_nav_menus'  => (bool) $this->get_setting( 'show_in_navmenus' ),
		], NULL, [
			'is_viewable' => $this->get_setting( 'contents_viewable', TRUE ),
		] );

		$this->register_posttype( 'main_posttype', [], [
			'is_viewable'      => $this->get_setting( 'contents_viewable', TRUE ),
			'primary_taxonomy' => $this->constant( 'category_taxonomy' ),
		] );
	}

	public function current_screen( $screen )
	{
		if ( $screen->post_type === $this->constant( 'main_posttype' ) ) {

			if ( 'edit' == $screen->base ) {

				$this->corerestrictposts__hook_screen_taxonomies( 'category_taxonomy' );

			} else if ( 'post' === $screen->base ) {

			}
		}
	}

	public function template_include( $template )
	{
		return $this->get_setting( 'contents_viewable', TRUE )
			? $this->templatetaxonomy__include( $template, $this->constant( 'category_taxonomy' ) )
			: $template;
	}
}
