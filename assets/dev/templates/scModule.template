<?php namespace <%= namespaceAuthor %>\<%= namespaceBase %>\Modules\<%= moduleCamelCase %>;

defined( 'ABSPATH' ) || die( header( 'HTTP/1.0 403 Forbidden' ) );

use <%= namespaceAuthor %>\<%= namespaceBase %>;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Core;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Helper;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Internals;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Scripts;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Services;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Template;
use <%= namespaceAuthor %>\<%= namespaceBase %>\WordPress;

class <%= moduleCamelCase %> extends <%= namespaceBase %>\Module
{
	use Internals\AdminPage;
	use Internals\CoreAdmin;
	use Internals\CoreRowActions;
	use Internals\FramePage;
	use Internals\MetaBoxSupported;
	use Internals\PostTypeFields;
	use Internals\RestAPI;
	use Internals\SubContents;

	public static function module()
	{
		return [
			'name'     => '<%= moduleUnderline %>',
			'title'    => _x( '<%= moduleTitle %>', 'Modules: <%= moduleTitle %>', 'geditorial-admin' ),
			'desc'     => _x( '<%= moduleTagline %>', 'Modules: <%= moduleTitle %>', 'geditorial-admin' ),
			'icon'     => '<%= moduleDashicon %>',
			'access'   => 'planned',
			'keywords' => [
				'subcontent',
			],
		];
	}

	protected function get_global_settings()
	{
		$roles = $this->get_settings_default_roles();

		return [
			'_subcontent' => [
				'subcontent_posttypes' => [ NULL, $this->get_settings_posttypes_parents() ],
				'subcontent_fields'    => [ NULL, $this->subcontent_get_fields_for_settings() ],
			],
			'_roles' => [
				'reports_roles' => [ _x( 'Roles that can view definition information.', 'Setting Description', '<%= moduleTextdomain %>' ), $roles ],
				'assign_roles'  => [ _x( 'Roles that can assign definition information.', 'Setting Description', '<%= moduleTextdomain %>' ), $roles ],
			],
			'_editpost' => [
				'admin_rowactions',
			],
			'_frontend' => [
				'tabs_support',
			],
			'_supports' => [
				'shortcode_support',
			],
			'posttypes_option' => 'posttypes_option',
		];
	}

	protected function get_global_constants()
	{
		return [
			'restapi_namespace' => 'content-definitions',
			'subcontent_type'   => 'content_definitions',
			'subcontent_status' => 'private',
			'main_shortcode'    => 'content-definitions',

			'term_empty_subcontent_data' => 'definition-data-empty',
		];
	}

	protected function get_global_strings()
	{
		$strings = [
			'fields' => [
				'subcontent' => [
					'label'    => _x( 'Label', 'Field Label: `label`', '<%= moduleTextdomain %>' ),
					'phone'    => _x( 'Contact', 'Field Label: `phone`', '<%= moduleTextdomain %>' ),
					'fullname' => _x( 'Fullname', 'Field Label: `fullname`', '<%= moduleTextdomain %>' ),
					'relation' => _x( 'Relation', 'Field Label: `relation`', '<%= moduleTextdomain %>' ),
					'identity' => _x( 'Identity', 'Field Label: `identity`', '<%= moduleTextdomain %>' ),
					'address'  => _x( 'Address', 'Field Label: `address`', '<%= moduleTextdomain %>' ),
				],
			],
		];

		$strings['frontend'] = [
			'tab_title' => _x( 'Definitions', 'Tab Title', '<%= moduleTextdomain %>' ),
		];

		$strings['notices'] = [
			'empty'    => _x( 'There is no definition information available!', 'Notice', '<%= moduleTextdomain %>' ),
			'noaccess' => _x( 'You have not necessary permission to manage the definition data.', 'Notice', '<%= moduleTextdomain %>' ),
		];

		if ( ! is_admin() )
			return $strings;

		$strings['metabox'] = [
			'supportedbox_title'  => _x( 'Definitions', 'MetaBox Title', '<%= moduleTextdomain %>' ),
			// 'metabox_action' => _x( 'Directory', 'MetaBox Action', '<%= moduleTextdomain %>' ),

			/* translators: %1$s: current post title, %2$s: posttype singular name */
			'mainbutton_title' => _x( 'Definitions of %1$s', 'Button Title', '<%= moduleTextdomain %>' ),
			/* translators: %1$s: icon markup, %2$s: posttype singular name */
			'mainbutton_text'  => _x( '%1$s Manage the Definitions of %2$s', 'Button Text', '<%= moduleTextdomain %>' ),

			/* translators: %1$s: current post title, %2$s: posttype singular name */
			'rowaction_title' => _x( 'Definitions of %1$s', 'Action Title', '<%= moduleTextdomain %>' ),
			/* translators: %1$s: icon markup, %2$s: posttype singular name */
			'rowaction_text'  => _x( 'Definitions', 'Action Text', '<%= moduleTextdomain %>' ),

			/* translators: %1$s: current post title, %2$s: posttype singular name */
			'columnrow_title' => _x( 'Definitions of %1$s', 'Row Title', '<%= moduleTextdomain %>' ),
			/* translators: %1$s: icon markup, %2$s: posttype singular name */
			'columnrow_text'  => _x( 'Definitions', 'Row Text', '<%= moduleTextdomain %>' ),
		];

		return $strings;
	}

	protected function subcontent_get_data_mapping()
	{
		return array_merge( $this->subcontent_base_data_mapping(), [
			'comment_content' => 'address',   // `text`
			'comment_agent'   => 'label',     // `varchar(255)`
			'comment_karma'   => 'order',     // `int(11)`

			'comment_author'       => 'fullname',   // `tinytext`
			'comment_author_url'   => 'phone',      // `varchar(200)`
			'comment_author_email' => 'identity',   // `varchar(100)`
			'comment_author_IP'    => 'relation',   // `varchar(100)`
		] );
	}

	protected function subcontent_define_searchable_fields()
	{
		if ( $human = <%= namespaceBase %>()->constant( 'personage', 'primary_posttype' ) )
			return [ 'fullname' => [ $human ] ];

		return [];
	}

	protected function subcontent_define_importable_fields()
	{
		return [
			'phone'   => 'label',
			'address' => 'label',
		];
	}

	protected function subcontent_define_unique_fields()
	{
		return [
			'phone',
		];
	}

	public function after_setup_theme()
	{
		$this->filter_module( 'audit', 'get_default_terms', 2 );
	}

	public function init()
	{
		parent::init();

		$this->filter_module( 'audit', 'auto_audit_save_post', 5, 11 );
		$this->filter_module( 'audit', 'auto_audit_save_post', 5, 12, 'subcontent' );
		$this->register_shortcode( 'main_shortcode' );
		$this->subcontent_hook__post_tabs();

		if ( ! is_admin() )
			return;

		$this->filter_module( 'tabloid', 'post_summaries', 4, 40, 'subcontent' );
	}

	public function importer_init()
	{
		$this->subcontent__hook_importer_init();
	}

	public function current_screen( $screen )
	{
		if ( $this->in_setting_posttypes( $screen->post_type, 'subcontent' ) ) {

			if ( 'post' == $screen->base ) {

				if ( $this->role_can( [ 'reports', 'assign' ] ) )
					$this->_hook_general_supportedbox( $screen, NULL, 'advanced', 'low', '-subcontent-grid-metabox' );

				$this->subcontent_do_enqueue_asset_js( $screen );

			} else if ( 'edit' == $screen->base ) {

				if ( $this->role_can( [ 'reports', 'assign' ] ) ) {

					if ( ! $this->rowactions__hook_mainlink_for_post( $screen->post_type, 18, 'subcontent' ) )
						$this->coreadmin__hook_tweaks_column_row( $screen->post_type, 18, 'subcontent' );

					Scripts::enqueueColorBox();
				}
			}
		}
	}

	protected function _render_supportedbox_content( $object, $box, $context = NULL, $screen = NULL )
	{
		$this->subcontent_do_render_supportedbox_content( $object, $context ?? 'supportedbox' );
	}

	public function admin_menu()
	{
		if ( $this->role_can( [ 'assign', 'reports' ] ) )
			$this->_hook_submenu_adminpage( 'framepage', 'exist' );
	}

	public function load_submenu_adminpage( $context = 'framepage' )
	{
		$this->_load_submenu_adminpage( $context );
		$this->subcontent_do_enqueue_app( TRUE );
	}

	public function render_framepage_adminpage()
	{
		$this->subcontent_do_render_iframe_content(
			TRUE,
			'framepage',
			/* translators: %s: post title */
			_x( 'Definition Grid for %s', 'Page Title', '<%= moduleTextdomain %>' ),
			/* translators: %s: post title */
			_x( 'Definitions Overview for %s', 'Page Title', '<%= moduleTextdomain %>' )
		);
	}

	public function setup_restapi()
	{
		$this->subcontent_restapi_register_routes();
	}

	public function main_shortcode( $atts = [], $content = NULL, $tag = '' )
	{
		return $this->subcontent_do_main_shortcode( $atts, $content, $tag );
	}

	public function audit_get_default_terms( $terms, $taxonomy )
	{
		return Helper::isTaxonomyAudit( $taxonomy ) ? array_merge( $terms, [
			$this->constant( 'term_empty_subcontent_data' ) => _x( 'Empty Definition Data', 'Default Term: Audit', '<%= moduleTextdomain %>' ),
		] ) : $terms;
	}
}
