<?php namespace <%= namespaceAuthor %>\<%= namespaceBase %>\Modules\<%= moduleCamelCase %>;

defined( 'ABSPATH' ) || die( header( 'HTTP/1.0 403 Forbidden' ) );

use <%= namespaceAuthor %>\<%= namespaceBase %>;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Core;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Internals;
use <%= namespaceAuthor %>\<%= namespaceBase %>\Services;
use <%= namespaceAuthor %>\<%= namespaceBase %>\WordPress;

class <%= moduleCamelCase %> extends <%= namespaceBase %>\Module
{

	public static function module()
	{
		return [
			'name'     => '<%= moduleUnderline %>',
			'title'    => _x( '<%= moduleTitle %>', 'Modules: <%= moduleTitle %>', '<%= adminTexdomain %>' ),
			'desc'     => _x( '<%= moduleTagline %>', 'Modules: <%= moduleTitle %>', '<%= adminTexdomain %>' ),
			'icon'     => '<%= moduleDashicon %>',
			'access'   => 'planned',
			'disabled' => gEditorial\Helper::moduleCheckWooCommerce(),
			'keywords' => [
				'',
				'woocommerce',
			],
		];
	}

	protected function get_global_settings()
	{
		$roles = $this->get_settings_default_roles();

		return [
			'_general' => [
				[
					'field'       => 'field',
					'type'        => 'text',
					'title'       => _x( 'Title', 'Setting Title', '<%= moduleTextdomain %>' ),
					'description' => _x( 'Description.', 'Setting Description', '<%= moduleTextdomain %>' ),
				],
			],
			'_supports' => [
				'shortcode_support',
			],
			'_editlist' => [],
			'_frontend' => [],
			'_roles' => [
				'reports_roles' => [ NULL, $roles ],
				'assign_roles'  => [ NULL, $roles ],
			],
			'_constants' => [
				'main_shortcode_constant' => [ NULL, '' ], // FIXME <---
			],
		];
	}

	protected function get_global_constants()
	{
		return [
			'main_shortcode' => '', // FIXME <---
		];
	}

	protected function get_global_strings()
	{
		$strings = [];

		if ( ! is_admin() )
			return $strings;

		// $strings['misc'] = [];

		return $strings;
	}

	public function init()
	{
		parent::init();

		$this->register_shortcode( 'main_shortcode' );
	}

	public function main_shortcode( $atts = [], $content = NULL, $tag = '' )
	{
		$args = shortcode_atts( [
			'id'      => get_queried_object_id(),
			'context' => NULL,
			'wrap'    => TRUE,
			'class'   => '',
			'before'  => '',
			'after'   => '',
		], $atts, $tag ?: $this->constant( 'main_shortcode' ) );

		if ( FALSE === $args['context'] )
			return NULL;

		// if ( ! $post = WordPress\Post::get( $args['id'] ) )
		if ( ! $product = wc_get_product( $args['id'] ) )
			return $content;

		$html = '';

		return gEditorial\ShortCode::wrap( $html, $this->constant( 'main_shortcode' ), $args );
	}
}
